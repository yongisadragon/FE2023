0328
JavaScript시작

-javascript코드는 script태그안에 작성해야하고, script태그는 body태그가 끝나는 지점 바로 위에 쓰는 것이 좋다.

-html과 js파일을 연결하는 것은 <script src='경로.js'></script>

-세미콜론(;)은 하나의 명령이 끝났다는 의미이나, 꼭 붙이지 않고 줄바꿈을 해줘도 한줄한줄이 정상 동작한다.

-script내부 주석처리는 //~ 이다. 여러 줄 주석 처리는 /* ~ */ 이다.

-문자열(string)자료형은 "text" 'text' 텍스르를 감싸주어야한다.

-숫자형(int, float)
정수형(int) - 20
실수형(float) - 1.2

-불자료형(bool) true/false

-자료형 감별: typeof ~


------------로또 뽑기------------
-1~45랜덤 숫자 추출하는 법
1) Math.random(); -> 0이상 ~ 1미만의 실수(float)를 추출 
2) Math.random(); * 45 -> 0이상~45미만의 실수이고, 0을 제외하자면 
3) Math.random(); * 45 + 1 -> 1이상 ~45 미만의 실수.
4) parseInt(); 소수점 붙은 실수 자료형 -> 정수로 변환 
parseInt(Math.random(); * 45 + 1);

-수백 수천개의 공을 뽑는다고하면, 여러개의 변수를 만드는 일도 노동력이다. 그럴때에 배열(Array)이라는 자료구조를 사용하는데, 배열을 사용하게되면 마치 서랍장을 사용하는 것처럼 하나의 변수안에 여러개의 값들을 넣을 수 있다. 형태는 var lotto = [1,2,3,4,5,6]; 처럼 대괄호 안에 넣는다. 배열의 index(순서)는 1을 뽑고자하면 lotto[0]이다. 

-.push(); -> 마지막 값 추가 즉, 
var lotto = [];
lotto.push(parseInt(Math.random(); * 45 + 1));는 로또 볼 하나를 뽑는 코드가 되시겠다. 그런데 6개의 볼을 뽑는데, 이것을 6줄을 쓰는 반복은 피해야한다. 
반복문은 for, while의 두가지 반복문이 있다. for문의 기본구조는 
for (시작; 끝; 증가){
  반복하려는 코드 

  }
예) for (var i = 0; i < 6; i++){
    반복하려는 코드
}

-즉, 최종적으로 for문 안쪽의 lotto.push를 6번의 반복되게 하기위해선

var lotto = [];
for (var i = 0; i < 6; i++){
lotto.push(parseInt(Math.random() * 45 + 1));
}
document.write(lotto);

-하지만 이렇게 진행하면 var lotto=[];라는 배열에 중복된 값이 입력될 수가 있다. 중복된 값을 제거하는 로직을 만들어보자.
만약 중복이 아니라면 .push(); 되게 하면 됨.
조건문의 기본 형식은 
if(조건){
  조건이 참인 경우 실행됨 
}
-식중에, .indexOf(값)을 이용해 배열안에 값이 있는지 없는지 검사해줌. 값이 있으면 위치 값을, 없으면 -1 , 즉 배열안에 값이 있다면 배열 순서(index값)를 내줄것이고, 임의로 뽑게 될 숫자(parseInt되는 값)가 배열안에 없다면(중복이 없다는 의미. 있는데도 또 나오라는건 중복이 된다는 얘기. 배열안에 너랑 같은애가 '없다면' 뒤에 걸 실행해줘.) lotto.push 해주면 될것이다. 즉 indexOf() == -1 라는 식은 중복이 없다면.이다. lotto.indexOf(num) == -1은 배열안의 num(parseInt되는 변수값)이 중복되느냐. 이를 식으로 바꿔보자면

var num = parseInt(Math.random()*45+1); -> 랜덤볼 뽑는 변수
if(lotto.indexOf(num) == -1){  
  lotto.push(num);
}
그래서 완성된 코드는
        var lotto = [];
        for (var i = 0; i < 6; i++) {
            var num = parseInt(Math.random() * 45 + 1);
            if (lotto.indexOf(num) == -1) {
                lotto.push(num);
            }
        }
        document.write(lotto);

-랜덤볼을 뽑았을 때, lotto 배열안에 중복이 없을경우, lotto.push(num) 해줘라. 하지만 이렇게 되면, '공을 뽑는 행위'를 6번 하라는 것이다. 즉, 한번의 중복된 행위가 생겨버리면, 공이 5개가 나오는 경우(배열이 5개만 차는 경우)가 생길 수 있다. 로직은 '공의 갯수'가 6개가 될때까지 행위를 반복하라는 걸 추가해야 할 것이다.
for반복문은 특정 횟수만큼 코드를 동작시킬 때에, while반복문은 특정 조건까지(언제까지) 코드를 반복할 때 사용된다.
while(조건){
  반복하려는 코드
}

-위 코드에서, for문(횟수 반복) 대신 while문 (특정 조건)으로 바꿔보자. .length는 배열의 길이이다. 배열안의 인덱스 길이가 <6라는 것은 공의 갯수가 6개가 될 때까지 반복 하라는 것. + if문 까지 하면 중복없이, 공이 6개가 될 때까지 반복.
        var lotto = [];
        while (lotto.length < 6) {
            var num = parseInt(Math.random() * 45 + 1);
            if (lotto.indexOf(num) == -1) {
                lotto.push(num);
            }
        }
        document.write(lotto);

- 배열에서 .sort() 배열의 값 정렬, 하지만 오름차순이 되게 하려면 
.sort((a,b)=>a-b)이다. 내림차순은 .sort((a,b)=>b-a) 이건 뒤에서 배울 개념이니 일단 모양만 외워두자. 최종 모습은

        var lotto = [];
        while (lotto.length < 6) {
            var num = parseInt(Math.random() * 45 + 1);
            if (lotto.indexOf(num) == -1) {
                lotto.push(num);
            }
        }
        lotto.sort((a,b)=>a-b);
        document.write(lotto);

-DRY(Don't Repeat Yourself)


------------글자수 세기------------
-DOM(Document Object Model) 웹 화면을 구성하는 html의 코드를 쉽게 접근할 수 있도록 만든 모델.
-document는 DOM의 진입점 역할(접근)을 수행한다. 
ex)documnet.getElementById('')를 이용해서 특정 id를 가진 태그를 선택.

<h1>자기소개</h1>
    <textarea class="form-control" rows="3" id="jasoseol">저는 인성 문제가 없습니다.</textarea>

-let content = document.getElementById('me').value <- me라는 id를 가진 태그의 value(입력 문장)을 가져오라.. 그리고 console.log(content);를 작성하면 콘솔창에 그 문장이 뜬다.
.length하면 길이를 출력.

-그렇다면 원하는 위치와 형태로 글자수를 세어줄 수 있는 요소를 넣어보자. 

<h1>자기소개</h1>
    <textarea class="form-control" rows="3" id="jasoseol">저는 인성 문제가 없습니다.</textarea>
<span id="count">(0/200)</span>

<script>
var content = document.getElementById('jasoseol').value;
document.getElementById('count').innerHTML -> (특정 id를 가진 HTML에 접근하는 방식.. 여기에 원하는 값을 담아주기 위해서, span태그 안쪽의 값이 선택됨)
document.getElementById('count').innerHTML = content.length;
</script>
-> content의 value의 길이를 대입해 달라. 여기서 등호(=)는 같다는 의미가 아니라, 오른쪽 값을 왼쪽에 대입해 달라는 의미이다.

-하지만 이렇게 처리하면 원하는 형태가 아니라 '지금 세어진 수'만 나오게 된다. ??/200의 형태가 되게 하려면 숫자형과 문자열을 더해주는 형태, '(' + '??' + '/200)'의 형태로 표현해야 (??/200)의 형태가 될 수 있다. 어려운 용어로 자바스크립트에선 자동으로 형변환이 된다고 한다. 가운데 숫자형 자료형이 문자를 더할때 사용하게되면 문자열로써 더해지게 된다. '' + '' + ''~ 의 형태..

완성된 코드는

<h1>자기소개</h1>
    <textarea class="form-control" rows="3" id="jasoseol">저는 인성 문제가 없습니다.</textarea>
<span id="count">(0/200)</span>

<script>
var content = document.getElementById('jasoseol').value;
document.getElementById('count').innerHTML = '(' + content.length + '/200)';
</script>

-만약 이 긴 코드를 여러번 쓸 일이 생긴다면? 함수를 이용하자! 함수는 '명령어의 모음'이다. 함수는 기본적으로 해당 형태이다.
function 함수이름 (){
  명령어1;
  명령어2;
} 
를 선언하고, 함수를 사용할때, 
함수이름(); 의 형태로 사용가능하다. 적용해보자면,

<script>
function counter(){
var content = document.getElementById('jasoseol').value;
document.getElementById('count').innerHTML = '(' + content.length + '/200)';
};         ->함수선언
counter(); ->함수사용
</script>

-그렇다면 글자를 쓸 때마다 자동으로 글자 수를 세어주기 위해서? '키보드를 누를때마다(이벤트)''글자수를 세어주어라(이벤트 핸들링)' 라는 '이벤트'를 추가해주면되는데, 이벤트에는 마우스 클릭, 키보드 누름, 값 변화, 페이지 로딩 등이있다. 이를 실행시켜주기 위해선, 
<textarea 이벤트=이벤트핸들링></textarea>의 형태로 작성해주면 된다.
-> <textarea onkeydown="counter()"></textarea> 키다운이 될때, 글자수를 세어주는 함수 이름을 입력.

-다음 단계로는, 200자 넘으면(if문), 더이상 안써지도록(200자 이후 잘라버리기) 하고싶다. 를 작성해보자. .substring() 라는 함수는 -> ~범위 까지 잘라낸다. 각각의 글자에도 배열처럼 인덱싱 번호가 있다. 물론 띄어쓰기도 그 순서에 포함된다. 즉, content= '인성 문제 없습니다.'; 라는 문자열을 가진 변수에 
content.substring(0,5); 라고 입력하면 '인성 문제'라고 출력된다. 이런 방식으로 .substring(0,200);을 하면 200글자 이상은 다 잘라지게 된다.

<script>
function counter(){
var content = document.getElementById('jasoseol').value;

    if(content.length > 200){
    content = content.substring(0,200);
    document.getElementById('jasoseol').value = content;
  } ->if문과 그 조건(200자 넘을때) 충족시 실행코드 입력(content변수에 그 숫자를 200넘으면 잘라내고, jasoseol의 벨류값에 200자까지 작성된 문자열을 대입.) 
document.getElementById('count').innerHTML = '(' + content.length + '/200)';
};        
counter();
</script>


------------jQuery------------
-장점
1.간결한 문법
2.편리한 API
3.크로스 브라우징 (모든 브라우저, 모든 버전에서 동일한 기능)

가장 기본적인 형태는 이렇다.
$(선택자).행위;
$('#content').val(); 는 이런 의미이다.  document.getElementById('jasoseol').value;
$('#content') : id가 content인 특정요소를 가져와 
.val() : value를 가져와.

-jQuery 이벤트 등록
    <script>
        function hello() {
            console.log('hello');
        }
    </script>
다음과 같은 함수가 선언되어있을 때,
<button id='click' onclick="hello();">클릭</button> 은
제이쿼리 $('#click').click(hello); 와 같은 의미이다.
여기서 .click은 onclick과 같은 효과를 가진 jQuery의 함수이다.

하지만 함수를 한번만 사용하는데도, 위와 같이 함수선언따로, 제이쿼리 따로 하면 코드가 길어진다. 이럴때에는 '익명 함수'라는 기능을 사용해서 함수 이름없이 사용할 수 있다. 말그대로 제이쿼리의 .click(); 괄호안에 펑션을 그대로 이식해주면 된다.(펑션이름은 빼고)
$('#click').click(hello); 에서 함수이름 hello가 들어갈 자리에
$('#click').click(function(){
  console.log('hello');
});

-스타크래프트 예제에서, 드론 클릭시 침을 발사하게 하는 코드 시작은 이렇다. 침 이미지 초기값은 diplay:none;이다.
$('#drone').click(function(){
  침 이미지 나타내기
});
이를 위해 구글링 팁: 검색어 -> 언어/라이브러리 + 원하는 기능. 예를 들어 jquery 나타나기. 라고 검색하기
fadeIn()에 관한 최상단 설명은 다음과 같다
.fadeIn( [duration ] [, complete ] ) -> []가 있는 것은 선택사항이며, 없는 속성이 있다면 필수로 입력해주자.


$('#drone').click(function(){
  $('#spit').fadeIn();
});

이렇게 작성하면 클릭시, 침이 페이드인으로 생겨난다. 같은 방법으로, 침이 나오고, 이동하고, 사라지고, 제자리로 돌아오는 코드는
    <script>
        $('#drone').click(function(){
            $('#spit').fadeIn(); //생성
            $('#spit').animate({left: '+=250'}); //left로 250 이동 애니메이션, css값은 필수 값이기 때문에 입력해줘야함.
            $('#spit').fadeOut(); //사라짐. 하지만 그자리에 그대로 있어서
            $('#spit').css({left: '150px'}) //css는 변경하고 싶은 css를 입력하면 바로 변경됨.
        });
    </script>

    -이제, 침에 맞는 벙커의 HP관리를 해보자.
     <h1 id='hp'>HP: 3</h1> 를 우선 추가해주고,
     <script>
        var hp = 3;  -> 변수 hp를 추가해 둔 뒤, 아래 순서대로 실행되게 해보자.
        $('#drone').click(function(){
            $('#spit').fadeIn();
            $('#spit').animate({left: '+=250'});
            $('#spit').fadeOut();
            $('#spit').css({left: '150px'});
            hp = hp - 1;  -> 3부터 시작해서 -1씩.
            $('#hp').text('HP :' + hp); -> .text는 이 문자를 대입해주는 함수
        });
    </script>

    이렇게 실행하면, 드론을 클릭 했을 '때에' HP가 감소한다. 이건 시간상으로, 벙커가 침을 맞고, HP가 감소해야하는데 타이밍이 맞질 않다. 왜 그러냐하면 코드는 순서대로 실행되기 때문에, 이전 코드가 종료되는지 확인을 하고 실행되게 해야한다. 그럴때에는 콜백 개념을 사용해야한다. fadeOut함수가 끝나는 시점에 HP관리를 위해 반영되는 부분에 익명함수를 파준다.

            $('#spit').fadeOut(function(){
            hp = hp - 1;
            $('#hp').text('HP :' + hp);
            });
            $('#spit').css({left: '150px'});
            ...
        
        이런식으로 파준다. 여기에 추가,, if문으로 HP가 0이 되면 벙커가 사라지게 하는 일은 간단할 것이다..
            $('#spit').fadeOut(function(){
            hp = hp - 1;
            $('#hp').text('HP :' + hp);
            if(hp == 0){
            @('#bunker').fadeOut();  <- 마지막을 이것추가
            }
            });
            $('#spit').css({left: '150px'});
            ...

최종
    <script>
       let hp = 3;
       $('#drone').click(function(){           
           $('#spit').fadeIn();
           $('#spit').animate({left: '+=250'});
           $('#spit').fadeOut(function(){
           hp = hp - 1;
           $('#hp').text('HP: ' + hp);
           if(hp == 0){
           $('#bunker').fadeOut();
           }
           });
           $('#spit').css({left: '150px'});
       });
    </script>

    
------------기념일 계산기------------

객체(Object)의 개념
이 사람의 이름은 이상용이고, 나이는 20살이다.
이런 ~는 ~다 라는 형태의 자료를 담는 것이 객체이다.
let person = {
  name: '이상용', 
  age: 29
}
에서 name과age는 키(key)혹은 속성명 이라고하며, '이상용'과 20을 값(value)혹은 속성값이라고 부른다. 

let person = {
  name: '이상용',
  age: 20,
  hobby: ['코딩','축구','농구'],   ->배열          -메서드
  money: {stock: 10, cash: 1}     ->또 다른 객체   -메서드
  sayHello: function(){           ->함수          -메서드
    console.log('hello')
  },
}
위와 같이 객체의 value에는 배열, 객체, 함수가 따로 들어갈 수 있는데, 이런 경우에는 메서드(method)라는 이름으로 불리우게 된다. 객체로 만들어진 정보를 객체에 접근해서 값을 빼올 수 있어야 하는데,
예) 객체(person).키값(name); 를 입력해서 빼올 수 있다. person.name; -> 이상용

-즉, 지금까지 접했던
content.length;    content라는 문자열도 객체, .length라는 속성이자 메서드
document.write();   document -> DOM을 다루는 객체에서,.write라는 메서드
console.log();    console이라는 객체에 .log라는 메서드 
이런 방식들이다.
-연습해보자.

  <script>
      let person = {
          name: 'yong',
          sayBye: function() { console.log('bye'); }
      }
      console.log(person.name);
      person.sayBye();
  </script>

콘솔창에는 순서대로 yong과 bye가 입력된다.

-Date객체, 객체는 직접 만들고 활용 할 수 있지만, js에서는 이미 특정 기능을 가진 객체를 내장하고 있어서, 활용 할 수 있다. Date객체는 
let now = new Date(); 현재 시각을 기준으로 데이터 객체가 만들어져 변수에 담기게 된다.
now.getMonth();
now.getDate();
now.getTime();
이외에는 javascript date를 검색해보자.
   <script>
        //1. Date 객체 생성
        var now = new Date();
        //2. 연도를 가져오는 메서드 .getFullYear()
        console.log(now.getFullYear());
        //3. 월 정보를 가져오는 메서드 .getMonth() {0: 1월, 1: 2월, ... 10: 11월, 11: 12월}
        console.log(now.getMonth());
        //4. 일 정보를 가져오는 메서드 .getDate()
        console.log(now.getDate());
        //5. 1970년 1월 1일 00:00:00을 기준으로 흐른 시간을 밀리초(ms)로 표시하는 메서드 .getTime()
        console.log(now.getTime());
        //6. 특정 일의 Date 객체 생성
        var christmas = new Date('2020-12-25');
        console.log(christmas);
        //7. 특정 ms의 Date 객체 생성
        var ms = new Date(1000);
        console.log(ms);
    </script>

-본격적으로 기념일을 계산해보자.
만난 밀리초 = 오늘.getTime()(70년1월1일 시점부터의 ms) - 사귄날.getTime()(70년1월1일 시점부터의 ms) 
만날 일 = 만난 밀리초를 일(day)로 환산

1.오늘 기준, 사귄날 기준으로 데이트 객체를 만들어준다.
let now = new Date();
let start = new Date('2022-06-30');

2.두 시간의 차이(Diff)를 구하면 사귄날로 부터 오늘까지 흐른시간이 계산된다.
get Time을 이용하자.
let timeDiff = now.getTime() - start.getTime();

3.도출된 시간이 ms로 계산이되고, 일로 변환해 줘 보자. (1000ms = 1s)
let day = timeDiff / (1000 * 60 * 60 * 24) + 1; //순서대로 1000ms(1s) - 1min - 1hr -1day
보통 사귄날을 1일이라고 하기 때문에, +1을 해준다. 소수점까지 나올때에는 변수 day에 Math.floor로 소수점을 날려주자.
HTML
    <section class='special-day'>
        <h3 class='title'>1000일</h3>
        <div class='date-box'>
            <p id='thousand' class='days-left'>0일 남음</p>
            <p id='thousand-date' class='date'>0000.00.00</p>
        </div>
    </section>

지난 날 카운트
    <script>
        var now = new Date();
        var start = new Date('2020-06-30');

        var timeDiff = now.getTime() - start.getTime();
        var day = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);
        $('#love').text(day + '일째');
    </script>

반대로 남은 시간은, 미래시간 - 현재 시간을 뺀 값을 계산해주면 된다. 비슷하지만 약간 다르게
남은 날 카운트
    <script>
        var now = new Date();
        var valentine = new Date('2024-02-14');

        var timeDiff2 = valentine.getTime() - now.getTime();
        var day2 = Math.floor(timeDiff2 / (1000 * 60 * 60 * 24) + 1);
        $('#valentine').text(day2 + '일 남음');
    </script>

그렇다면 1000일이 되는 날은 몇년 몇월 몇일인가? 사귄날(1일)에 999일을 더해주면 1000일이니까,
1000일의 밀리초 = 사귄날.getTime() + 999일의.getTime()
1000일 = newDate(1000일의 밀리초)

let ms = start.getTime() + 999 *(1000 * 60 * 60 * 24)   
->이게 시작날 + 999일을 ms로 환산한 시간이 된다.
let thousand = new Date(ms);  ->1000일 객체
let thousandDate = thousand.getFullYear() + '.' + thousand.getMonth()+1 (0이 1월이므로) + '.' + thousand.getDate();   -> thousand 라는 객체에 담긴 ms단위의 시간정보를 각각 Year, Month(이 경우는 0이 1월이므로 +1해줌), Date로 나눠서 더해줬음.
$('#thousand-date').text(thousandDate);


        let ms = start.getTime() + 999*(1000 * 60 * 60 * 24);
        let thousand = new Date(ms);
        let thousandDate = thousand.getFullYear() + '.' + (thousand.getMonth()+1) + '.' + thousand.getDate();
        $('#thousand-date').text(thousandDate);
        
        

통합  
<script>
        var now = new Date();
        var start = new Date('2020-06-30');

        //우리 몇 일째?
        var timeDiff = now.getTime() - start.getTime();
        var day = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);
        $('#love').text(day + '일째');

        //기념일까지 남은 날짜는?
        var valentine = new Date('2021-02-14');
        var timeDiff2 = valentine.getTime() - now.getTime();
        var day2 = Math.floor(timeDiff2 / (1000 * 60 * 60 * 24) + 1);
        $('#valentine').text(day2 + '일 남음');

        //천일은 언제인가?
        var thousand = new Date(start.getTime() + 999 * (1000 * 60 * 60 * 24));
        var thousandDate = thousand.getFullYear() + '.' + (thousand.getMonth()+1) + '.' + thousand.getDate();
        $('#thousand-date').text(thousandDate);

        //기념일까지 남은 날짜는?
        var timeDiff3 = thousand.getTime() - now.getTime();
        var day3 = Math.floor(timeDiff3 / (1000 * 60 * 60 * 24) + 1);
        $('#thousand').text(day3 + '일 남음');
    </script>

    +++
    git 
    
        // 시작하기: git init
        // 유저 이름 설정: git config --global user.name "codelion-jocoding"
        // 이메일 등록: git config --global user.email #####@gmail.com
        // 파일 추가: git add .
        // 메세지 입력: git commit -m "first commit"
        // 보낼 곳 등록: git remote add origin https://github.com/codelion-jocoding/myrepo.git
        // 보낼 곳으로 코드 전송: git push origin master






----------------세렝게티-----------------

class="container"는 부트스트랩에서 grid를 생성할 때 쓴다.

mbti 는 
1.E/I =2
2.S/N =1
3.T/F =0
4.J/P =3

2가지 중 '앞'에만 점수를 주는 방식.
예를 들어 4가지 유형에 대해서 3문제 씩 총 12문제라고 할때, 각각 E에 2점, S에1점, T는0점, J는3점.. 자동으로 뒤는 점수계산이 된다. 과반(2점이상)이 선택되면 그 유형이 선택되도록 로직을 짠다.

-input type='hideen'은 외부적으로는 보이지 않고, 내부적으로 갖고 있고 싶을 때 hidden 인풋 태그 사용.