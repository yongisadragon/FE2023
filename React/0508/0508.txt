오늘도 시작을 해볼까요..

저번 복습
JSX와 HTML 구분
1. 모든 프로퍼티 이름은 카멜 케이스(CamelCase) 대문자 구분을 따릅니다.
2. 문자를 제외한 속성값은 중괄호({ })를 사용합니다.
3. 'true' 값을 갖는 속성은 속성 이름만으로 표현할 수 있습니다. 만약 false라면 중괄호를 사용합니다.
4. 'class' 속성은 'className'으로 표기합니다.
5. 인라인 스타일은 객체 형태로 사용합니다. style={{backgroundColor='black',}}


리액트에서 컴포넌트(Component)는 UI를 구성하는 독립적인 모듈이며, 일반적으로 클래스 혹은 함수로 작성됩니다.

컴포넌트는 재사용성을 높이기 위해 일반적으로 작고, 재사용 가능한 단위로 만들어집니다. 컴포넌트는 상태(state)와 속성(props)을 가질 수 있으며, 이러한 상태와 속성을 기반으로 UI를 렌더링합니다.

클래스형 컴포넌트는 React.Component를 상속받아서 작성하며, 렌더링 메소드(render)를 구현하여 UI를 생성합니다. 함수형 컴포넌트는 함수를 작성하여 UI를 생성하며, React Hooks를 사용하여 상태와 생명주기를 관리할 수 있습니다.

컴포넌트는 다른 컴포넌트 내부에서 사용될 수도 있고, ReactDOM.render() 메소드를 사용하여 브라우저에 실제로 렌더링 될 수도 있습니다. 컴포넌트의 재사용성과 모듈화된 구조는 개발 생산성과 코드 유지보수성을 높이는데 큰 도움을 줍니다.

리액트에서 엘리먼트(Element)는 컴포넌트를 구성하는 가장 작은 단위입니다.

엘리먼트는 UI를 구성하는 독립적인 부분이며, 일반적으로 HTML 태그를 흉내내는 객체로 표현됩니다. 예를 들어, div 태그를 흉내내기 위해서는 React.createElement('div', props, children)와 같이 createElement 함수를 호출하여 엘리먼트를 생성합니다.

엘리먼트는 불변(immutable)하며, 속성(props)과 자식 엘리먼트(children)를 가지고 있습니다. 엘리먼트는 컴포넌트 내부에서 반환될 수 있고, 다른 엘리먼트의 자식으로 사용될 수 있습니다.

React.createElement() 함수 대신 JSX 문법을 사용하여 엘리먼트를 생성하는 것이 일반적이며, JSX는 HTML과 유사한 문법을 제공하여 가독성과 작성 편의성을 높입니다.

엘리먼트는 컴포넌트의 UI를 구성하는 데 필수적이며, 리액트는 엘리먼트를 가상 돔(Virtual DOM)에 저장하여 변경사항을 최적화하고 성능을 향상시킵니다.

리액트에서 변수의 값이 변화 될 때
React의 elements 즉, 가상돔은 자바스크립트 객체 형태입니다. 이 elements는 불변하는(immutable)특징을 가지고 있습니다. 따라서 엄밀하게 따진다면 업데이트되는 것은 컴포넌트이고 가상돔은 교체된다고 표현하는 것이 맞습니다.

컴포넌트의 변화를 감지하고 변경사항을 화면에 반영하는 것은 많은 자원이 소모되는 작업입니다. 때문에 리액트는 컴포넌트를 업데이트 해야할 때를 결정하는 특별한 메커니즘을 가지고 있습니다.

이를 ‘재조정(reconciliation)’을 거친다고 표현합니다.   
컴포넌트 트리를 비교한다!

🧐 재조정(**reconciliation)
reconciliation**은 ****양자를 서로 비교 대조해서 차이를 없애고 같은 값이 되도록 하는 과정을 의미하는 회 계 용어입니다. 혹은 종교에서의 고해성사를 의미하기도 합니다.

React의 재조정은 Virtual DOM을 사용하여 React 컴포넌트 트리를 비교하고 최적화하는 프로세스입니다. React는 컴포넌트가 업데이트될 때 마다 Virtual DOM을 사용하여 이전 버전의 컴포넌트 트리와 새 버전의 컴포넌트 트리를 비교합니다.

reconciliation 프로세스는 이전 버전의 컴포넌트 트리와 새 버전의 컴포넌트 트리를 비교하여 다음과 같은 작업을 수행합니다.

1. 컴포넌트의 타입이 같은지 비교합니다.
2. 컴포넌트의 속성(prop)이 변경되었는지 비교합니다.
3. 컴포넌트의 자식 요소가 변경되었는지 비교합니다.

이러한 비교 작업을 통해 React는 변경된 부분만 업데이트하고, 나머지 부분은 그대로 유지합니다. 이렇게 하면 React는 DOM 조작을 최소화하고 더 빠르고 효율적인 애플리케이션을 만들 수 있습니다.

정리하자면, reconciliation 프로세스를 통해 React는 컴포넌트를 업데이트하여 즉각적으로 반응하는 사용자 인터페이스를 만들 수 있습니다. 이것이 바로 React가 다른 프론트엔드 라이브러리와 차별화되는 중요한 기능 중 하나입니다.
참고 : [https://ko.legacy.reactjs.org/docs/reconciliation.html](https://ko.legacy.reactjs.org/docs/reconciliation.html)
