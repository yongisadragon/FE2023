//useState는 배열로 반환되며, 첫번째 원소이다.message(상태)를 변경할 수 있는 함수는 setMessage가 유일하다.

//useState를 쓰는 이유는, set~을 통해 값이 변경될 때 컴포넌트를 다시 렌더링을 빠르게 하기 위함이다.

e.preventDefault는 이벤트 기본동작을 막는다. 예를 들어 form에서 발생하는 버튼 submit은 옛날 html방식이기 때문에 화면이 플래싱되며 새로고침이 일어나는데, 이를 막는다.


리액트 이벤트 핸들러 종류
onClick: 요소를 클릭할 때 발생하는 이벤트 핸들러입니다.
onChange: 폼 요소의 값이 변경될 때 발생하는 이벤트 핸들러입니다.
onInput: 입력 요소의 값이 변경될 때 발생하는 이벤트 핸들러입니다.
onFocus: 요소에 포커스가 맞춰질 때 발생하는 이벤트 핸들러입니다.
onMouseEnter: 요소에 마우스가 들어갈 때 발생하는 이벤트 핸들러입니다.
onMouseLeave: 요소에서 마우스가 빠져나갈 때 발생하는 이벤트 핸들러입니다.


1. Login 화면을 우선 렌더링해준다. Login.jsx에서 useState세팅 해주구요.
2. Login에는 사용자 정보를 저장하는 로직이 짜여있다. App.js의 유저정보를 Login.jsx의 정보와 대조하기 위해서 자식 컴포넌트에 보내기 위해서 <Login/>안에 프랍스로 보낸다. 프랍스로 쓰든지, {}안에 구조분해할당으로 infoUser직접써주든가.
3. handleLoginSubmit안에서 전달받는 유저정보와 기존 저장된 유저정보를 비교하는 구문을 짜줘야하마.
4. 로그인이 됐따 안됐다의 상태값을 어떻게 확인할 수 있을까? 그건 App.js에서 만들 수 있는데, useState로 false와 true로 상태를 분할해놓자.그리고 프롭스로 부모에서 값과 그 값을 번경할 수 있는 함수를 이 login과 setLogin을 통해 내려줌.
5. Login에서 로그인 상태값을 바꿔줘야함. 이걸 뭘로하냐! 프랍스를 통해 받은 setLogin함수를 이용한다. 엄밀히 따지면 자식에서 끌어올리기 치는것이다. 상태끌어올리기. 함수에 true를 전달해줘서. 그럼 App.js에서 login 초기 값(false)이 결국 바뀌게 되거등요? 그걸 App.js에서 삼항식을 이용해서 이 값이 true일때만 (로그인 정보 일치하면) Homepage띄워주게 하면됨!


https://paullabworkspace.notion.site/9-2340d41e3ac849ca942996efb9a4bf35
키값을 넣어주는 이유는 리엑트에서 랜더링 작업을 진행했을 때 어떤 요소에 변동이 있다면 그 요소만 새로 그려주기 위함입니다. key가 없다면 하나의 요소가 변경이 되어도 array에 담긴 요소를 모두 다시 그려줍니다. 
"리스트 각 요소가 고유한 key 값을 가지지 않았다."라는 경고 메세지입니다.  key 값을 넣어주지 않았기 때문에 에러가 발생한 것입니다. 컴포넌트 안에서 리스트를 렌더링할 때는 꼭 key 값을 넣어줘야 합니다.
요소에 이름을 달아주는 것.

key로 